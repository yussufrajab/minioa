package com.zanzibar.csms.service;

import com.zanzibar.csms.dto.report.ReportDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Slf4j
public class ReportGeneratorService {

    @Value("${app.reports.storage.path:./reports}")
    private String reportsStoragePath;

    @Value("${app.reports.base-url:http://localhost:8080/api/reports/download}")
    private String reportsBaseUrl;

    /**
     * Generate report file in specified format
     */
    public String generateReportFile(ReportDto report, String format) {
        log.info("Generating report file: {} in format: {}", report.getReportId(), format);
        
        try {
            // Create reports directory if it doesn't exist
            Path reportsDir = Paths.get(reportsStoragePath);
            if (!Files.exists(reportsDir)) {
                Files.createDirectories(reportsDir);
            }

            String fileName = generateFileName(report, format);
            Path filePath = reportsDir.resolve(fileName);
            
            switch (format.toUpperCase()) {
                case "PDF":
                    generatePDFReport(report, filePath);
                    break;
                case "EXCEL":
                    generateExcelReport(report, filePath);
                    break;
                case "CSV":
                    generateCSVReport(report, filePath);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported format: " + format);
            }

            String downloadUrl = reportsBaseUrl + "/" + fileName;
            log.info("Report file generated successfully: {}", downloadUrl);
            return downloadUrl;
            
        } catch (Exception e) {
            log.error("Failed to generate report file: {}", report.getReportId(), e);
            throw new RuntimeException("Failed to generate report file", e);
        }
    }

    /**
     * Generate PDF report
     */
    private void generatePDFReport(ReportDto report, Path filePath) {
        log.info("Generating PDF report: {}", report.getReportId());
        
        try {
            // This is a placeholder implementation
            // In a real application, you would use libraries like iText, Apache PDFBox, or similar
            
            StringBuilder pdfContent = new StringBuilder();
            pdfContent.append("CIVIL SERVICE MANAGEMENT SYSTEM\n");
            pdfContent.append("==============================\n\n");
            pdfContent.append("Report: ").append(report.getReportName()).append("\n");
            pdfContent.append("Type: ").append(report.getReportType()).append("\n");
            pdfContent.append("Generated: ").append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\n");
            pdfContent.append("Period: ").append(report.getPeriodStart().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")))
                     .append(" to ").append(report.getPeriodEnd().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\n");
            pdfContent.append("Generated By: ").append(report.getGeneratedBy()).append("\n\n");
            
            if (report.getDescription() != null) {
                pdfContent.append("Description: ").append(report.getDescription()).append("\n\n");
            }
            
            // Add sections
            if (report.getSections() != null) {
                for (ReportDto.ReportSectionDto section : report.getSections()) {
                    pdfContent.append("Section: ").append(section.getSectionName()).append("\n");
                    pdfContent.append("Type: ").append(section.getSectionType()).append("\n");
                    pdfContent.append("Records: ").append(section.getData() != null ? section.getData().size() : 0).append("\n\n");
                    
                    if (section.getData() != null) {
                        for (ReportDto.ReportDataDto data : section.getData()) {
                            pdfContent.append("- ").append(data.getName()).append(": ").append(data.getValue()).append("\n");
                        }
                    }
                    pdfContent.append("\n");
                }
            }
            
            pdfContent.append("\nTotal Records: ").append(report.getTotalRecords()).append("\n");
            pdfContent.append("Report ID: ").append(report.getReportId()).append("\n");
            
            // For now, save as text file (in real implementation, use PDF library)
            Files.write(filePath, pdfContent.toString().getBytes());
            
        } catch (Exception e) {
            log.error("Error generating PDF report: {}", report.getReportId(), e);
            throw new RuntimeException("Failed to generate PDF report", e);
        }
    }

    /**
     * Generate Excel report
     */
    private void generateExcelReport(ReportDto report, Path filePath) {
        log.info("Generating Excel report: {}", report.getReportId());
        
        try {
            // This is a placeholder implementation
            // In a real application, you would use Apache POI for Excel generation
            
            StringBuilder excelContent = new StringBuilder();
            excelContent.append("REPORT_NAME,REPORT_TYPE,GENERATED_AT,PERIOD_START,PERIOD_END,GENERATED_BY,TOTAL_RECORDS\n");
            excelContent.append("\"").append(report.getReportName()).append("\",");
            excelContent.append("\"").append(report.getReportType()).append("\",");
            excelContent.append("\"").append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\",");
            excelContent.append("\"").append(report.getPeriodStart().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\",");
            excelContent.append("\"").append(report.getPeriodEnd().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\",");
            excelContent.append("\"").append(report.getGeneratedBy()).append("\",");
            excelContent.append(report.getTotalRecords()).append("\n\n");
            
            // Add section data
            if (report.getSections() != null) {
                for (ReportDto.ReportSectionDto section : report.getSections()) {
                    excelContent.append("SECTION: ").append(section.getSectionName()).append("\n");
                    excelContent.append("ID,NAME,TYPE,VALUE\n");
                    
                    if (section.getData() != null) {
                        for (ReportDto.ReportDataDto data : section.getData()) {
                            excelContent.append("\"").append(data.getId()).append("\",");
                            excelContent.append("\"").append(data.getName()).append("\",");
                            excelContent.append("\"").append(data.getType()).append("\",");
                            excelContent.append("\"").append(data.getValue()).append("\"\n");
                        }
                    }
                    excelContent.append("\n");
                }
            }
            
            // For now, save as CSV file (in real implementation, use Apache POI)
            Files.write(filePath, excelContent.toString().getBytes());
            
        } catch (Exception e) {
            log.error("Error generating Excel report: {}", report.getReportId(), e);
            throw new RuntimeException("Failed to generate Excel report", e);
        }
    }

    /**
     * Generate CSV report
     */
    private void generateCSVReport(ReportDto report, Path filePath) {
        log.info("Generating CSV report: {}", report.getReportId());
        
        try {
            StringBuilder csvContent = new StringBuilder();
            
            // Header
            csvContent.append("Report Name,Report Type,Generated At,Period Start,Period End,Generated By,Total Records\n");
            csvContent.append("\"").append(report.getReportName()).append("\",");
            csvContent.append("\"").append(report.getReportType()).append("\",");
            csvContent.append("\"").append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))).append("\",");
            csvContent.append("\"").append(report.getPeriodStart().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\",");
            csvContent.append("\"").append(report.getPeriodEnd().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))).append("\",");
            csvContent.append("\"").append(report.getGeneratedBy()).append("\",");
            csvContent.append(report.getTotalRecords()).append("\n\n");
            
            // Data
            if (report.getSections() != null) {
                for (ReportDto.ReportSectionDto section : report.getSections()) {
                    csvContent.append("Section: ").append(section.getSectionName()).append("\n");
                    csvContent.append("ID,Name,Type,Value\n");
                    
                    if (section.getData() != null) {
                        for (ReportDto.ReportDataDto data : section.getData()) {
                            csvContent.append("\"").append(escapeCSV(data.getId())).append("\",");
                            csvContent.append("\"").append(escapeCSV(data.getName())).append("\",");
                            csvContent.append("\"").append(escapeCSV(data.getType())).append("\",");
                            csvContent.append("\"").append(escapeCSV(String.valueOf(data.getValue()))).append("\"\n");
                        }
                    }
                    csvContent.append("\n");
                }
            }
            
            Files.write(filePath, csvContent.toString().getBytes());
            
        } catch (Exception e) {
            log.error("Error generating CSV report: {}", report.getReportId(), e);
            throw new RuntimeException("Failed to generate CSV report", e);
        }
    }

    /**
     * Generate file name for report
     */
    private String generateFileName(ReportDto report, String format) {
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String sanitizedName = report.getReportName().replaceAll("[^a-zA-Z0-9]", "_");
        return String.format("%s_%s_%s.%s", 
            sanitizedName, 
            report.getReportType(), 
            timestamp, 
            format.toLowerCase());
    }

    /**
     * Escape CSV special characters
     */
    private String escapeCSV(String value) {
        if (value == null) {
            return "";
        }
        return value.replace("\"", "\"\"");
    }
}